<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope,$rootScope) {
		/* widget controller */
		var c = this;
// save changed data to server
	c.updateNote = function(updateType) {
		c.server.get({
			action: 'updateNote',
			noteID: c.data.noteID,
			noteBody: c.data.note,
			noteTitle: c.data.title
		}).then(function(r) {
		});
	}
//
		$rootScope.$on('selectNote', function(event,data) {
			c.server.get({ //calls the Server script and passes custom input
				action: 'getNote',
				noteID: $rootScope.noteID
			}).then(function(r) { //returns a promise. When the response is received from the server, the .then() function logic executes.
				c.data.title = r.data.note.title;
				c.data.note = r.data.note.note;
				c.data.noteID = r.data.note.sys_id;
			});
		});
	}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

})();]]></link>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
		/* populate the 'data' object */
		if (input && input.noteID) { //input object is the data object received from the Client Script's controller.
			var note = new GlideRecord('x_snc_createnotes_note');
			if (note.get(input.noteID)) { 
				if (input.action == 'getNote') {
					data.note = {};
					$sp.getRecordValues(data.note, note, "title, note, sys_id");
				} //Copies values for the specified field names from the GlideRecord into the data parameter
				else if (input.action == 'updateNote') { 
					note.title = input.noteTitle; 
					note.note = input.noteBody; 
					note.update(); // GlideRecord update() method writes new values for an existing record to the database
				}
			}
		}
	})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-02-25 14:19:29</sys_created_on>
        <sys_id>aba90e96db332300dfe32bfa4b961909</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_aba90e96db332300dfe32bfa4b961909</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-27 13:16:12</sys_updated_on>
        <template><![CDATA[</--* Add the ng-change= directive to both the note-title and note-body HTML elements so the widget can respond to changes.*-->
<div class="panel panel-default" ng-show="c.data.noteID">
  <div class="panel-heading clearfix">
    <div class="row">
      <div class="col-md-12">
        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
      </div>
    </div>
  </div>
  <div class="panel-body">
    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}" ></textarea>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
